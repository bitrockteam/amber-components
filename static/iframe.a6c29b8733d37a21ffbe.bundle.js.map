{"version":3,"file":"static/iframe.a6c29b8733d37a21ffbe.bundle.js","sources":["webpack:///./src/components/tabs/tab-content.ts","webpack:///./src/components/tabs/index.ts","webpack:///./src/components/card/index.ts","webpack:///./src/components/card/parts.ts","webpack:///./.storybook/stories/button.ts","webpack:///./src/components/button/index.ts","webpack:///./.storybook/stories/tabs.ts","webpack:///./.storybook/stories/card.ts","webpack:///./.storybook/stories/code.ts","webpack:///./src/components/code/index.ts"],"sourcesContent":["var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { AmberElement, html, property, customElement } from '../../libs/amber-element';\nexport const TagName = 'amber-tab-content';\nlet TabContent = class TabContent extends AmberElement {\n    constructor() {\n        super(...arguments);\n        this.visible = false;\n    }\n    render() {\n        return html `\n      ${this.visible ? html `<slot></slot>` : ''}\n    `;\n    }\n};\n__decorate([\n    property({ type: Boolean })\n], TabContent.prototype, \"visible\", void 0);\nTabContent = __decorate([\n    customElement(TagName)\n], TabContent);\nexport { TabContent };\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { AmberElement, html, property, customElement } from '../../libs/amber-element';\nimport { classMap } from 'lit-html/directives/classMap';\nimport styles from './style.scss';\nimport { TagName as TabContent } from './tab-content';\nlet Tabs = class Tabs extends AmberElement {\n    constructor() {\n        super(...arguments);\n        this.labels = 'First,Second';\n        this.active = 0;\n        this.fitted = false;\n    }\n    _showTab(index) {\n        const tabs = this.querySelectorAll(TabContent);\n        tabs.forEach((e, i) => i === index ? e.setAttribute('visible', '') : e.removeAttribute('visible'));\n    }\n    _setActive(evt) {\n        evt.preventDefault();\n        const index = parseInt(evt.target.dataset.index);\n        this.active = index;\n        this._showTab(index);\n        this.triggerEvent('change', { active: index });\n    }\n    render() {\n        this._showTab(this.active);\n        const classes = {\n            'fitted': this.fitted\n        };\n        const labels = this.labels.split(',') || [];\n        return html `\n      ${this.setStyles(styles)}\n      \n      <section \n        class=${classMap(classes)}\n      >\n        <ul>\n          ${labels.map((e, i) => html `\n            <li\n              class=${this.active === i ? 'active' : ''}\n            >\n              <a \n                href=\"#\"\n                data-index=${i}\n                @click=${(event) => this._setActive(event)}\n              >${e}</a>\n            </li>\n          `)}\n        </ul>\n        <slot></slot>\n      </section>\n    `;\n    }\n};\n__decorate([\n    property({ type: String })\n], Tabs.prototype, \"labels\", void 0);\n__decorate([\n    property({ type: Number })\n], Tabs.prototype, \"active\", void 0);\n__decorate([\n    property({ type: Boolean })\n], Tabs.prototype, \"fitted\", void 0);\nTabs = __decorate([\n    customElement('amber-tabs')\n], Tabs);\nexport { Tabs };\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { AmberElement, html, property, customElement } from '../../libs/amber-element';\nimport { taxonomy, media } from './parts';\nimport styles from './style.scss';\nlet Card = class Card extends AmberElement {\n    constructor() {\n        super(...arguments);\n        this.title = 'Card title';\n        this.taxonomy = '';\n        this.media = '';\n    }\n    render() {\n        return html `\n      ${this.setStyles(styles)}\n      \n      <article \n        class=\"card\"\n      >\n        ${media(this.media, this.title)}\n        <section>\n          ${taxonomy(this.taxonomy)}\n          <h3>${this.title}</h3>\n          <p><slot></slot></p>\n        </section>\n      </article>\n    `;\n    }\n};\n__decorate([\n    property({ type: String })\n], Card.prototype, \"title\", void 0);\n__decorate([\n    property({ type: String })\n], Card.prototype, \"taxonomy\", void 0);\n__decorate([\n    property({ type: String })\n], Card.prototype, \"media\", void 0);\nCard = __decorate([\n    customElement('amber-card')\n], Card);\nexport { Card };\n","import { html } from 'lit-html';\nconst check = (prop) => prop && prop.length;\nconst taxonomy = (value) => check(value) ? html `<h6>${value}</h6>` : html ``;\nconst media = (value, title) => check(value) ? html `\n    <figure>\n      <img \n        src=${value} \n        alt=${title}\n      >\n    </figure>\n  ` : html ``;\nexport { taxonomy, media };\n","/* global document */\nimport { storiesOf, addDecorator } from '@storybook/polymer';\nimport { withKnobs, select, boolean } from '@storybook/addon-knobs';\nimport { withNotes } from '@storybook/addon-notes';\nimport { html } from 'lit-html';\nimport markdown from './../docs/button.md';\nimport './../../src/components/button';\nconst priorities = {\n    primary: 'primary',\n    secondary: 'secondary',\n    tertiary: 'tertiary',\n};\nconst types = {\n    button: 'button',\n    submit: 'submit',\n    reset: 'reset'\n};\nconst states = {\n    success: 'success',\n    error: 'error',\n    neutral: 'neutral',\n    default: ''\n};\nconst progress = {\n    success: 'success',\n    error: 'error',\n    pending: 'pending',\n    default: ''\n};\naddDecorator(withNotes);\naddDecorator(withKnobs);\nstoriesOf('Button', module)\n    .add('Playground', () => html `<amber-button\n    ?fitted=${boolean('fitted', false)}\n    ?disabled=${boolean('disabled', false)}\n    priority=${select('priority', priorities, 'secondary')}\n    type=${select('type', types, 'button')}\n    state=${select('state', states, '')}\n    progress=${select('progress', progress, '')}\n  >Action here</amber-button>`, {\n    notes: {\n        markdown\n    }\n});\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { AmberElement, html, property, customElement, } from '../../libs/amber-element';\nimport { classMap } from 'lit-html/directives/classMap';\nimport styles from './style.scss';\nlet Button = class Button extends AmberElement {\n    constructor() {\n        super(...arguments);\n        this.priority = 'secondary';\n        this.state = '';\n        this.disabled = false;\n        this.fitted = false;\n        this.progress = '';\n        this.type = 'button';\n    }\n    render() {\n        const classes = {\n            'fitted': this.fitted,\n            'primary': this.priority === 'primary',\n            'secondary': this.priority === 'secondary',\n            'tertiary': this.priority === 'tertiary',\n            'success': this.state === 'success',\n            'error': this.state === 'error',\n            'is-loading': this.progress === 'pending',\n            'is-success': this.progress === 'success',\n            'is-error': this.progress === 'error',\n            'neutral': this.state === 'neutral',\n        };\n        return html `\n      ${this.setStyles(styles)}\n      \n      <button\n        type=${this.type}\n        ?disabled=${this.disabled}\n        class=${classMap(classes)}\n      >\n        <span class=\"content-loading\">Loading</span>\n        <span class=\"content-success\">Success</span>\n        <span class=\"content-error\">Error</span>\n        <span class=\"content-default\"><slot></slot></span>\n      </button>\n    `;\n    }\n};\n__decorate([\n    property({ type: String })\n], Button.prototype, \"priority\", void 0);\n__decorate([\n    property({ type: String })\n], Button.prototype, \"state\", void 0);\n__decorate([\n    property({ type: Boolean })\n], Button.prototype, \"disabled\", void 0);\n__decorate([\n    property({ type: Boolean })\n], Button.prototype, \"fitted\", void 0);\n__decorate([\n    property({ type: String })\n], Button.prototype, \"progress\", void 0);\n__decorate([\n    property({ type: String })\n], Button.prototype, \"type\", void 0);\nButton = __decorate([\n    customElement('amber-button')\n], Button);\nexport { Button };\n","/* global document */\nimport { storiesOf, addDecorator } from '@storybook/polymer';\nimport { withKnobs, number, boolean, text } from '@storybook/addon-knobs';\nimport { action } from '@storybook/addon-actions';\nimport { withNotes } from '@storybook/addon-notes';\nimport { html } from 'lit-html';\nimport markdown from './../docs/tabs.md';\nimport '../../src/components/tabs';\nconst labels = 'About us, Pricing, Contacts';\naddDecorator(withNotes);\naddDecorator(withKnobs);\nstoriesOf('Tabs', module)\n    .add('Playground', () => html `<amber-tabs\n    labels=${text('labels', labels)}\n    active=${number('active', 0)}\n    ?fitted=${boolean('fitted', false)}\n    @change=${action('change')}\n  >\n    <amber-tab-content>First content</amber-tab-content>\n    <amber-tab-content>Second content</amber-tab-content>\n    <amber-tab-content>Third content</amber-tab-content>\n  </amber-tabs>`, {\n    notes: {\n        markdown\n    }\n});\n","/* global document */\nimport { storiesOf, addDecorator } from '@storybook/polymer';\nimport { withKnobs, text } from '@storybook/addon-knobs';\nimport { withNotes } from '@storybook/addon-notes';\nimport { html } from 'lit-html';\nimport markdown from './../docs/card.md';\nimport '../../src/components/card';\nconst img = 'https://source.unsplash.com/random/300x200';\nconst title = 'My awesome card';\naddDecorator(withNotes);\naddDecorator(withKnobs);\nstoriesOf('Card', module)\n    .add('Playground', () => html `<amber-card\n  title=${text('title', title)}\n  media=${text('media', img)}\n  taxonomy=${text('taxonomy', 'News')}\n>\n  Some content here\n</amber-card>`, {\n    notes: {\n        markdown\n    }\n});\n","/* global document */\nimport { storiesOf, addDecorator } from '@storybook/polymer';\nimport { withKnobs, boolean, text } from '@storybook/addon-knobs';\nimport { withNotes } from '@storybook/addon-notes';\nimport { action } from '@storybook/addon-actions';\nimport { html } from 'lit-html';\nimport markdown from './../docs/code.md';\nimport '../../src/components/code';\naddDecorator(withNotes);\naddDecorator(withKnobs);\nstoriesOf('Code', module)\n    .add('Playground', () => html `<amber-code-snippet\n  ?clipboard=${boolean('clipboard', false)}\n  label=${text('label', 'Copy')}\n  @copied=${action('copied')}\n>\n  p {\n    color: red;\n  }\n</amber-code-snippet>\n\n<h4>Paste here</h4>\n<textarea style=\"width: 100%; min-height: 100px; resize: vertical;\"></textarea>\n`, {\n    notes: {\n        markdown\n    }\n});\n","var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\nimport { AmberElement, html, property, customElement } from '../../libs/amber-element';\n// import {\n//   classMap,\n//   ClassInfo\n// } from 'lit-html/directives/classMap';\nimport styles from './style.scss';\nconst _navigator = navigator;\nlet CodeSnippet = class CodeSnippet extends AmberElement {\n    constructor() {\n        super(...arguments);\n        this.clipboard = false;\n        this.label = 'Copy';\n    }\n    _copy(evt) {\n        const code = this.innerHTML;\n        const content = code.length ? code.trim() : code;\n        _navigator.clipboard.writeText(content)\n            .then(() => this.triggerEvent('copied', { content }));\n    }\n    render() {\n        const button = () => this.clipboard ? html `\n\n\n      <amber-button\n        priority=\"tertiary\"\n        state=\"neutral\"\n        @click=${(event) => this._copy(event)}\n      >\n        ${this.label}\n      </amber-button>\n    ` : html ``;\n        return html `\n      ${this.setStyles(styles)}\n      \n      <section>\n        ${button()}\n        <pre>\n          <code>\n            <slot></slot>\n          </code>\n        </pre>\n      </section>\n    `;\n    }\n};\n__decorate([\n    property({ type: Boolean })\n], CodeSnippet.prototype, \"clipboard\", void 0);\n__decorate([\n    property({ type: String })\n], CodeSnippet.prototype, \"label\", void 0);\nCodeSnippet = __decorate([\n    customElement('amber-code-snippet')\n], CodeSnippet);\nexport { CodeSnippet };\n"],"mappings":"AAAA;AAeA;AAIA;ACgBA;AACA;;AAEA;;;AAGA;;AAEA;;;;AAIA;AACA;AACA;;;;;;AASA;ACxCA;AACA;;;;AChBA;;;AAGA;AACA;;;AAGA;;AARA;ADwBA;;;;AAOA;AEAA;AACA;AACA;AACA;AACA;AACA;AAEA;ACPA;AACA;;AAEA;AACA;AACA;;;;;;;AAUA;ACnCA;AACA;AACA;AACA;;;;;AAMA;ACTA;AACA;AACA;;;AAIA;ACPA;AACA;AACA;;;;;;;;;AAUA;ACcA;AACA;;AAbA;AACA;AACA;;;;AAIA;;AAEA;;AAEA;;;;;;;AAeA","sourceRoot":""}